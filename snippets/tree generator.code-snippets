{
	"tree generator": {
		"scope": "c++,cpp,cc",
		"prefix": "tree generator",
		"body": [
			"///Random Number generator",
			"ull __SEED=3;",
			"const ull __MULTI=6364136223846793005ULL;",
			"const ull __INC=1442695040888963407ULL;",
			"ull lcg(){return __SEED=__SEED* __MULTI+ __INC;}",
			"template<class _T>inline _T random(_T L,_T R){return lcg()%(R-L+1)+L;}",
			"#include <ext/pb_ds/assoc_container.hpp>",
			"using namespace __gnu_pbds;",
			"typedef tree<",
			"int,    //type",
			"null_type,",
			"less<int>,  //type",
			"rb_tree_tag,",
			"tree_order_statistics_node_update>",
			"ordered_set;",
			"vector<pii> makeTree(int n)",
			"{",
			"    ///One based node number",
			"    ordered_set a,b;",
			"    a.insert(1);",
			"    for(int i=2;i<=n;i++)",
			"        b.insert(i);",
			"    vector<pii> vec;",
			"    for(int c=2;c<=n;c++){",
			"        int i=random(0,c-2);",
			"        int j=random(0,n-c);",
			"        auto x=b.find_by_order(j);",
			"        auto y=a.find_by_order(i);",
			"        vec.push_back(make_pair(*x, *y));",
			"        b.erase(x);",
			"        a.insert(*x);",
			"        ",
			"    }",
			"    return vec;",
			"}"
		],
		"description": ""
	}
}
